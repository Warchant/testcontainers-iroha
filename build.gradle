plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'jacoco'
    id "org.sonarqube" version "2.6"
}

group 'jp.co.soramitsu.iroha'
version '1.0.0'

sourceCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

final def testContainersVersion = '1.8.1'
final def testContainersPostgresVersion = '1.8.1'
final def irohaPureJavaVersion = '0.4.0'
final def lombokVersion = '1.18.2'
final def jacksonVersion = '2.9.7'
final def spockVersion = '1.2-groovy-2.4'
final def spockGenesisVersion = '0.6.0'
final def cglibVersion = '3.2.8'
final def bytebuddyVersion = '1.9.1'
final def objgenesisVersion = '3.0'

dependencies {
    // for mocking in groovy
    testCompile("net.bytebuddy:byte-buddy:${bytebuddyVersion}")
    testCompile("org.objenesis:objenesis:${objgenesisVersion}")
    testCompile("cglib:cglib-nodep:${cglibVersion}")
    testCompile("com.nagternal:spock-genesis:${spockGenesisVersion}")
    testCompile("org.spockframework:spock-core:${spockVersion}")

    //lombok
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")

    // jackson
    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

    // iroha java
    implementation "com.github.warchant:iroha-pure-java:${irohaPureJavaVersion}"

    // testcontainers
    compile("org.testcontainers:postgresql:${testContainersPostgresVersion}")
    compile("org.testcontainers:testcontainers:${testContainersVersion}")

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/reports/")
}

jacocoTestReport {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/coverage.xml")
        csv.enabled false
        html.enabled false
        html.destination file("${buildDir}/reports/html")
    }

    dependsOn(test)
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
}

sonarqube {
    properties {
        property "sonar.projectKey", "lib:testcontainers.iroha"
    }
}
